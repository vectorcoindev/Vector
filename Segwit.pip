<pre>SEGWIT BIP...yada yada...</pre> ==Abstract== This BIP defines a new structure called a "witness" that is committed to blocks separately from the transaction merkle tree. This structure contains data required to check transaction validity but not required to determine transaction effects. In particular, scripts and signatures are moved into this new structure. The witness is committed in a tree that is nested into the block's existing merkle root via the coinbase transaction for the purpose of making this BIP soft fork compatible. A future hard fork can place this tree in its own branch. ==Motivation== The entirety of the transaction's effects are determined by output consumption (spends) and new output creation. Other transaction data, and signatures in particular, are only required to validate the blockchain state, not to determine it. By removing this data from the transaction structure committed to the transaction merkle tree, several problems are fixed: 1) Nonintentional malleability becomes impossible. Since signature data is no longer part of the transaction hash, changes to how the transaction was authorized is no longer relevant to transaction identification. This makes it possible to safely create unconfirmed transaction dependency chains. 2) Signature data becomes prunable. 3) Fraud proofs become possible. 4) Script can be changed with soft forks. etc... ==Specification== * CTransaction gets, in addition to vin and vout, a vwit, whichcontains a CTxInWitness object for each input. A CTxInWitness contains a CScriptWitness objectand can potentially be extended to contain other kinds of witness data.A CScriptWitness is a vector of byte vectors (nominally: the input stack to the program, no longerencoded as a CScript, but just the resulting stack directly). * A new serialization for CTransaction is defined: http://blockhawk.net/diagrams/witnesstx.png(int32 nVersion,0x00 marker, 0x01 flag, vector<CTxIn>, vector<CTxOut>,vector<CTxInWitness>, int32 nLockTime) instead of (int32 nVersion,vector<CTxIn>, vector<CTxOut>, int32 nLockTime). This will never parseas a valid transaction (even if parsing succeeds, it means it'sinterpreted as a transaction with no inputs and 1 output). If allwitnesses are empty, the old serialization format is used. - Rationale for not having an independent CWitnessTransaction withits own serialization: this would require separate "tx" and "block"messages, and all RPC calls operating on raw transactions would needto be duplicated, or need inefficinent or nondeterministic guessworkto know which type is to be used. - Rationale for not using just a single 0x00 byte as marker: thatwould lead to empty transactions (no inputs, no outputs, which areused in some tests) to be interpreted as new serialized data. - Rationale for the 0x01 flag byte in between: this will allow us toeasily add more extra non-committed data to transactions (like txoutsbeing spent, ...). It can be interpreted as a bitvector. * A new message 'havewitness' is sent after receiving 'verack' toindicate that a node can provide witness if requested (similar to'sendheaders') * New inv types MSG_WITNESS_TX and MSG_WITNESS_BLOCK are added, onlyfor use in getdata. Inv itself still use just MSG_TX and MSG_BLOCK,similar to MSG_FILTERED_BLOCK. - Rationale for not advertizing witnessness in invs: we don't alwaysuse invs anymore (with 'sendheaders' BIP 130), plus it's not useful:implicitly, every transaction and block have a witness, old ones justhave empty ones. * Transactions' GetHash is always computed on the old non-witnessserialization. A new CTransaction::GetWitnessHash is added which iscomputed from the witness-serialization (this means that transactionswith an empty witness have witness hash equal to normal hash). * A new block rule is added which requires a commitment (a merkle rootcomputed similarly to the normal transaction one) to the witnesshashes to be present as the last 32 bytes ofblock.vtx[0].vin[0].scriptSig (it doesn't need to be a push). Thishopefully does not conflict with any other existing commitmentschemes. To make it extensible, an extra merkle path can be provided(in the coinbase's "witness" field) so that coinbase commitment can beused for multiple things. * A scriptPubKey (or redeemscript in case of P2SH) that is just asingle push of bytes gets a new meaning (the pushed data is called the"witness program"). - Rationale for using a template (a single data push) and not a newopcode: it can't function as an opcode, because it needs to look atthe exact contents of the scriptSig (exactly empty or just exactly theP2SH redeemscript push, if we want to avoid malleability), whilenormal opcode operations can only look at the resulting stack.- Rationale for supporting witness programs inside P2SH: backwardcompatibility with old sender software. * A witness program starts with a version byte. If that version byteis unknown, the script is treated as anyone can spend. This allowssoftforking _any_ script change later on, by adding new version bytes(IIRC suggested by Matt). * Two versions of witness programs are defined: v0 and v1. v0 programsare 0x00 + redeemscript (and have their initial stack in the witness).v1 programs are 0x01 + SHA256(redeemscript) (and have redeemscript +initial stack in the witness).- Rationale for using SHA256 and not Hash160: P2SH-like scripts shouldreally be protected by a 256-bit hash, as there are possible collisionattacks (and 2^80 work is not infeasible anymore, see the Bitcoinblockchain for an example...). Using SHA256 has the additionaladvantage of being able to reuse the Hash160-based known script indexin keystore (because Hash160 = RIPEMD160 + SHA256).- Rationale for having 2 versions: we want to move the contents oflong redeemscripts to the witness (as it's of no use to non-validatingclients, so it belongs there). However, if we would do that for simplescripts, we end up with a 20-byte hash of a script in the scriptPubKey(if P2SH), a 32-byte hash of an inner script in the scriptSig, andthen the full script in the witness, which seems to be a lot ofredundancy. ==Examples== ==Reference Implementation==
